cscope 15 $HOME/workspace/alg/src/tree/bitree -q 0000000193 0000023808
	@/home/tgni/workspace/alg/src/tree/bitree/fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@/home/tgni/workspace/alg/src/tree/bitree/queue.c

1 
	~"queue.h
"

2 
	~"Áèl.h
"

3 
	~<°dlib.h
>

5 
	#MöQueueSize
 ( 5 )

	)

7 
	sQueueRec‹d
 {

8 
	mC≠acôy
;

9 
	mFr⁄t
;

10 
	mRór
;

11 
	mSize
;

12 
EÀmítTy≥
 *
	mAºay
;

15 
MakeEm±y
–
Queue
 
Q
 );

17 
	$IsEm±yQ
–
Queue
 
Q
 )

19  
Q
->
Size
 == 0;

20 
	}
}

22 
	$IsFuŒ
–
Queue
 
Q
 )

24  
Q
->
Size
 =Q->
C≠acôy
;

25 
	}
}

27 
Queue
 
	$Cª©eQueue
–
MaxEÀmíts
 )

29 
Queue
 
Q
;

31 if–
MaxEÀmíts
 < 
MöQueueSize
 )

32 
	`Eº‹
( "Queue size isÅoo small" );

34 
Q
 = 
	`mÆloc
––
QueueRec‹d
 ) );

35 if–
Q
 =
NULL
 )

36 
	`F©ÆEº‹
( "Out of space!!!" );

38 
Q
->
Aºay
 = 
	`mÆloc
––
EÀmítTy≥
 ) * 
MaxEÀmíts
 );

39 if–
Q
->
Aºay
 =
NULL
 )

40 
	`F©ÆEº‹
( "Out of space!!!" );

41 
Q
->
C≠acôy
 = 
MaxEÀmíts
;

42 
	`MakeEm±y
–
Q
 );

44  
Q
;

45 
	}
}

47 
	$MakeEm±y
–
Queue
 
Q
 )

49 
Q
->
Size
 = 0;

50 
Q
->
Fr⁄t
 = 1;

51 
Q
->
Rór
 = 0;

52 
	}
}

54 
	$Di•o£Queue
–
Queue
 
Q
 )

56 if–
Q
 !
NULL
 ) {

57 
	`‰ì
–
Q
->
Aºay
 );

58 
	`‰ì
–
Q
 );

60 
	}
}

62 
	$Succ
–
VÆue
, 
Queue
 
Q
 )

64 if–++
VÆue
 =
Q
->
C≠acôy
 )

65 
VÆue
 = 0;

66  
VÆue
;

67 
	}
}

69 
	$Enqueue
–
EÀmítTy≥
 
X
, 
Queue
 
Q
 )

71 if–
	`IsFuŒ
–
Q
 ) )

72 
	`Eº‹
( "Full queue" );

74 
Q
->
Size
++;

75 
Q
->
Rór
 = 
	`Succ
( Q->Rear, Q );

76 
Q
->
Aºay
[ Q->
Rór
 ] = 
X
;

78 
	}
}

80 
EÀmítTy≥
 
	$Fr⁄t
–
Queue
 
Q
 )

82 if–!
	`IsEm±yQ
–
Q
 ) )

83  
Q
->
Aºay
[ Q->
Fr⁄t
 ];

84 
	`Eº‹
( "Empty queue" );

86 
	}
}

100 
EÀmítTy≥
 
	$Dequeue
–
Queue
 
Q
 )

102 
EÀmítTy≥
 
X
 = 0;

104 if–
	`IsEm±yQ
–
Q
 ) ) {

105  (
EÀmítTy≥
)0;

107 
Q
->
Size
--;

108 
X
 = 
Q
->
Aºay
[ Q->
Fr⁄t
 ];

109 
Q
->
Fr⁄t
 = 
	`Succ
( Q->Front, Q );

111  
X
;

112 
	}
}

	@/home/tgni/workspace/alg/src/tree/bitree/queue.h

1 #i‚de‡
_Queue_h


2 
	#_Queue_h


	)

4 * 
	tEÀmítTy≥
;

5 
	gQueueRec‹d
;

6 
QueueRec‹d
 *
	tQueue
;

8 
IsFuŒ
–
Queue
 
Q
 );

9 
Queue
 
Cª©eQueue
–
MaxEÀmíts
 );

10 
Di•o£Queue
–
Queue
 
Q
 );

11 
Enqueue
–
EÀmítTy≥
 
X
, 
Queue
 
Q
 );

12 
EÀmítTy≥
 
Fr⁄t
–
Queue
 
Q
 );

13 
EÀmítTy≥
 
Dequeue
–
Queue
 
Q
 );

14 
IsEm±yQ
–
Queue
 
Q
 );

	@/home/tgni/workspace/alg/src/tree/bitree/stack.c

1 
	~"°ack.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

5 
	sNode


7 
EÀmítTy≥
 
	mEÀmít
;

8 
PåToNode
 
	mNext
;

11 
	$IsEm±y
–
Sèck
 
S
 )

13  
S
->
Next
 =
NULL
;

14 
	}
}

16 
Sèck
 
	$Cª©eSèck
( )

18 
Sèck
 
S
;

20 i‡(!(
S
 = 
	`mÆloc
((
Node
))))

21  
NULL
;

23 
S
->
Next
 = 
NULL
;

24 
	`MakeEm±y
–
S
 );

26  
S
;

27 
	}
}

29 
	$MakeEm±y
–
Sèck
 
S
 )

31 i‡(
S
 =
NULL
)

34  !
	`IsEm±y
–
S
 ) )

35 
	`P›
–
S
 );

38 
	}
}

40 
	$Di•o£Sèck
–
Sèck
 
S
 )

42 
	`MakeEm±y
–
S
 );

43 
	`‰ì
–
S
 );

44 
	}
}

46 
	$Push
–
EÀmítTy≥
 
X
, 
Sèck
 
S
 )

48 
PåToNode
 
TmpCñl
;

50 i‡(!(
TmpCñl
 = 
	`mÆloc
((
Node
))))

53 
TmpCñl
->
EÀmít
 = 
X
;

54 
TmpCñl
->
Next
 = 
S
->Next;

55 
S
->
Next
 = 
TmpCñl
;

58 
	}
}

60 
EÀmítTy≥
 
	$T›
–
Sèck
 
S
 )

62 i‡(!
	`IsEm±y
–
S
 ) )

63  
S
->
Next
->
EÀmít
;

65  
NULL
;

66 
	}
}

68 
EÀmítTy≥
 
	$P›
–
Sèck
 
S
 )

70 
PåToNode
 
Fú°Cñl
;

71 
EÀmítTy≥
 
e
;

73 i‡(
	`IsEm±y
(
S
))

74  
NULL
;

76 
Fú°Cñl
 = 
S
->
Next
;

77 
S
->
Next
 = S->Next->Next;

78 
e
 = 
Fú°Cñl
->
EÀmít
;

79 
	`‰ì
(
Fú°Cñl
);

81  
e
;

82 
	}
}

	@/home/tgni/workspace/alg/src/tree/bitree/stack.h

1 #i‚de‡
_Sèck_h_


2 
	#_Sèck_h_


	)

4 
	~"ty≥s.h
"

6 
	gNode
;

7 
Node
 *
	tPåToNode
;

8 
PåToNode
 
	tSèck
;

9 * 
	tEÀmítTy≥
;

11 
IsEm±y
–
Sèck
 
S
 );

12 
Sèck
 
Cª©eSèck
( );

13 
Di•o£Sèck
–
Sèck
 
S
 );

14 
MakeEm±y
–
Sèck
 
S
 );

15 
Push
(
EÀmítTy≥
 
X
, 
Sèck
 
S
 );

16 
EÀmítTy≥
 
T›
–
Sèck
 
S
 );

17 
EÀmítTy≥
 
P›
–
Sèck
 
S
 );

	@/home/tgni/workspace/alg/src/tree/bitree/tree.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

4 
	~<m©h.h
>

5 
	~"åì.h
"

6 
	~"°ack.h
"

7 
	~"queue.h
"

9 
	#MaxTªeEÀmít
 (256)

	)

10 
	#DIST_MAX
 (64)

	)

12 
BiTªe
 
	$In£π
(
BiTªe
 
T
, 
TEÀmTy≥
 
x
)

14 
BiTNode
 *
¥e
, *
p
;

15 
dú
 = 0;

18 
¥e
 = 
p
 = 
T
;

19 
p
) {

20 
dú
 = 
	`ønd
() % 2;

21 
¥e
 = 
p
;

22 
p
 = (
dú
Ë?Ö->
lchûd
 :Ö->
rchûd
;

25 i‡(!(
p
 = (
BiTNode
 *)
	`mÆloc
((BiTNode))))

26  
NULL
;

27 
p
->
d©a
 = 
x
;

28 
p
->
lchûd
 =Ö->
rchûd
 = 
NULL
;

30 i‡(!
T
) {

31 
T
 = 
p
;

33 i‡(
dú
)

34 
¥e
->
lchûd
 = 
p
;

36 
¥e
->
rchûd
 = 
p
;

39  
T
;

40 
	}
}

42 
BiTªe
 
	$Cª©e
(
TEÀmTy≥
 
A
[], 
ƒ
)

44 
BiTªe
 
T
 = 
NULL
;

45 
i
;

47 
i
 = 0; i < 
ƒ
; ++i)

48 
T
 = 
	`In£π
(T, 
A
[
i
]);

50  
T
;

51 
	}
}

54 
	$De°roy
(
BiTªe
 
T
)

56 
Queue
 
que
;

58 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

59 
	`Enqueue
(
T
, 
que
);

61 (
T
 = 
	`Dequeue
(
que
))) {

62 i‡(
T
->
lchûd
)

63 
	`Enqueue
(
T
->
lchûd
, 
que
);

64 i‡(
T
->
rchûd
)

65 
	`Enqueue
(
T
->
rchûd
, 
que
);

66 
	`‰ì
(
T
);

68 
	`Di•o£Queue
(
que
);

71 
	}
}

74 
	#NR_DEPTH_MAX
 256

	)

75 
	g__LAST
[
NR_DEPTH_MAX
] = {0};

77 
	$PrötDú
(
BiTªe
 
T
)

79 
i
;

81 
i
 = 0; i < 
T
->
dïth
; ++i) {

82 i‡(
i
 =
T
->
dïth
 - 1)

83 
	`¥ötf
("%s", 
__LAST
[
i
] ? "`-- " : "|-- ");

85 
	`¥ötf
("%s", 
__LAST
[
i
] ? " " : "| ");

87 
	`¥ötf
("%d\n", 
T
->
d©a
);

89 i‡(!
T
->
lchûd
 && !T->
rchûd
) {

91 } i‡(
T
->
lchûd
 && !T->
rchûd
) {

92 
__LAST
[
T
->
dïth
] = 1;

93 
	`PrötDú
(
T
->
lchûd
);

94 } i‡(!
T
->
lchûd
 && T->
rchûd
) {

95 
__LAST
[
T
->
dïth
] = 1;

96 
	`PrötDú
(
T
->
rchûd
);

98 
__LAST
[
T
->
dïth
] = 0;

99 
	`PrötDú
(
T
->
lchûd
);

100 
__LAST
[
T
->
dïth
] = 1;

101 
	`PrötDú
(
T
->
rchûd
);

103 
	}
}

105 
öt32_t
 
	gDEPTH
 = 0;

106 
öt32_t
 
	gDIST
 = 0;

107 
öt32_t
 
	gWIDTH
 = 0;

108 
	gBUF
[1024] = {0};

109 
öt32_t
 
	gBUF_POS
 = 0;

111 
ölöe
 
öt32_t
 
	$CompuãWidth
(
öt32_t
 
X
)

113 
öt32_t
 
width
 = 0;

115 i‡(
X
 < 0) {

116 
X
 = -X;

117 ++
width
;

120 ++
width
;

121 } (
X
 /= 10) > 0);

123  
width
;

124 
	}
}

126 
	$PrötNode
(
BiTªe
 
T
)

128 
öt32_t
 
i
;

130 i‡(
T
->
dïth
 !
DEPTH
) {

131 
	`¥ötf
("\n");

132 
DIST
 = 
T
->
di°
;

133 
BUF
[
BUF_POS
++] = '\n';

134 
BUF
[
BUF_POS
] = '\0';

135 
	`¥ötf
("%s", 
BUF
);

137 
BUF_POS
 = 0;

139 
DIST
 = 
T
->
di°
 - DIST - 
WIDTH
;

142 
i
 = 0; i < 
DIST
; ++i)

143 
	`¥ötf
(" ");

144 
	`¥ötf
("%d", 
T
->
d©a
);

146 
DIST
 = 
T
->
di°
;

147 
DEPTH
 = 
T
->
dïth
;

148 
WIDTH
 = 
	`CompuãWidth
(
T
->
d©a
);

150 i‡(
T
->
lchûd
 && !T->
rchûd
) {

151  ; 
BUF_POS
 < 
T
->
lchûd
->
di°
; ++BUF_POS) {

152 
BUF
[
BUF_POS
] = ' ';

154 
BUF
[
BUF_POS
++] = '/';

155  ; 
BUF_POS
 < 
T
->
di°
; ++BUF_POS) {

156 
BUF
[
BUF_POS
] = '-';

158 
BUF
[
BUF_POS
++] = '|';

159 } i‡(!
T
->
lchûd
 && T->
rchûd
) {

160  ; 
BUF_POS
 < 
T
->
di°
; ++BUF_POS) {

161 
BUF
[
BUF_POS
] = ' ';

163 
BUF
[
BUF_POS
++] = '|';

164  ; 
BUF_POS
 < 
T
->
rchûd
->
di°
; ++BUF_POS) {

165 
BUF
[
BUF_POS
] = '-';

167 
BUF
[
BUF_POS
++] = '\\';

168 } i‡(
T
->
lchûd
 && T->
rchûd
) {

169  ; 
BUF_POS
 < 
T
->
lchûd
->
di°
; ++BUF_POS) {

170 
BUF
[
BUF_POS
] = ' ';

172 
BUF
[
BUF_POS
++] = '/';

173  ; 
BUF_POS
 < 
T
->
di°
; ++BUF_POS) {

174 
BUF
[
BUF_POS
] = '-';

176 
BUF
[
BUF_POS
++] = '|';

177  ; 
BUF_POS
 < 
T
->
rchûd
->
di°
; ++BUF_POS) {

178 
BUF
[
BUF_POS
] = '-';

180 
BUF
[
BUF_POS
++] = '\\';

184 
	}
}

186 
	$CompuãDi°AndDïth
(
BiTªe
 
T
)

188 
Queue
 
que
;

190 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

191 
T
->
di°
 = 
DIST_MAX
;

192 
T
->
dïth
 = 0;

193 
	`Enqueue
(
T
, 
que
);

195 (
T
 = 
	`Dequeue
(
que
))) {

196 i‡(
T
->
lchûd
) {

197 
T
->
lchûd
->
dïth
 = T->depth + 1;

198 
T
->
lchûd
->
di°
 = T->di° - 
	`round
(
DIST_MAX
/
	`pow
(2, T->lchûd->
dïth
));

199 
	`Enqueue
(
T
->
lchûd
, 
que
);

201 i‡(
T
->
rchûd
) {

202 
T
->
rchûd
->
dïth
 = T->depth + 1;

203 
T
->
rchûd
->
di°
 = T->di° + 
	`round
(
DIST_MAX
/
	`pow
(2, T->rchûd->
dïth
));

204 
	`Enqueue
(
T
->
rchûd
, 
que
);

208 
	`Di•o£Queue
(
que
);

211 
	}
}

214 
	$PrötTªe
(
BiTªe
 
T
)

216 
Queue
 
que
;

218 i‡(
T
 =
NULL
)

221 
	`CompuãDi°AndDïth
(
T
);

223 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

224 
	`Enqueue
(
T
, 
que
);

226 (
T
 = 
	`Dequeue
(
que
))) {

227 
	`PrötNode
(
T
);

228 i‡(
T
->
lchûd
)

229 
	`Enqueue
(
T
->
lchûd
, 
que
);

230 i‡(
T
->
rchûd
)

231 
	`Enqueue
(
T
->
rchûd
, 
que
);

233 
	`¥ötf
("\n");

235 
	`Di•o£Queue
(
que
);

238 
	}
}

240 
öt32_t
 
	$InOrdî
(
BiTªe
 
T
)

242 
Sèck
 
S
;

243 
BiTªe
 
p
;

245 
S
 = 
	`Cª©eSèck
();

246 
p
 = 
T
;

248 
p
 || !
	`IsEm±y
(
S
)) {

249 i‡(
p
) {

250 
	`Push
(
p
, 
S
);

251 
p
 =Ö->
lchûd
;

253 
p
 = (
BiTªe
)
	`P›
(
S
);

254 
	`¥ötf
("%d ", 
p
->
d©a
);

255 
p
 =Ö->
rchûd
;

258 
	`¥ötf
("\n");

260 
	`Di•o£Sèck
(
S
);

263 
	}
}

265 
	$PªOrdî
(
BiTªe
 
T
)

267 
Sèck
 
S
;

268 
BiTNode
 *
p
;

270 
S
 = 
	`Cª©eSèck
();

271 
p
 = 
T
;

273 
p
 || !
	`IsEm±y
(
S
)) {

274 i‡(
p
) {

275 
	`Push
(
p
, 
S
);

276 
	`¥ötf
("%d ", 
p
->
d©a
);

277 
p
 =Ö->
lchûd
;

279 
p
 = (
BiTNode
 *)
	`P›
(
S
);

280 
p
 =Ö->
rchûd
;

283 
	`¥ötf
("\n");

285 
	`Di•o£Sèck
(
S
);

288 
	}
}

290 
	$Po°Ordî
(
BiTªe
 
T
)

292 
Sèck
 
S
;

293 
BiTNode
 *
p
, *
r
 = 
NULL
;

295 
S
 = 
	`Cª©eSèck
();

296 
p
 = 
T
;

298 
p
 || !
	`IsEm±y
(
S
)) {

299 i‡(
p
) {

300 
	`Push
(
p
, 
S
);

301 
p
 =Ö->
lchûd
;

303 
p
 = (
BiTNode
 *)
	`T›
(
S
);

304 i‡(
p
->
rchûd
 &&Ö->rchûd !
r
) {

307 
p
 =Ö->
rchûd
;

308 
	`Push
(
p
, 
S
);

309 
p
 =Ö->
lchûd
;

311 
p
 = (
BiTNode
 *)
	`P›
(
S
);

312 
	`¥ötf
("%d ", 
p
->
d©a
);

313 
r
 = 
p
;

314 
p
 = 
NULL
;

318 
	`¥ötf
("\n");

320 
	`Di•o£Sèck
(
S
);

323 
	}
}

326 
	$LevñOrdî
(
BiTªe
 
T
)

328 
Queue
 
que
;

330 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

331 
	`Enqueue
(
T
, 
que
);

333 (
T
 = 
	`Dequeue
(
que
))) {

334 
	`¥ötf
("%d ", 
T
->
d©a
);

335 i‡(
T
->
lchûd
)

336 
	`Enqueue
(
T
->
lchûd
, 
que
);

337 i‡(
T
->
rchûd
)

338 
	`Enqueue
(
T
->
rchûd
, 
que
);

340 
	`¥ötf
("\n");

342 
	`Di•o£Queue
(
que
);

345 
	}
}

347 
	$Revî£LevñOrdî
(
BiTªe
 
T
)

349 
Queue
 
que
;

350 
Sèck
 
S
;

351 
BiTNode
 *
p
;

353 
S
 = 
	`Cª©eSèck
();

354 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

355 
	`Enqueue
(
T
, 
que
);

357 (
T
 = 
	`Dequeue
(
que
))) {

358 
	`Push
(
T
, 
S
);

359 i‡(
T
->
lchûd
)

360 
	`Enqueue
(
T
->
lchûd
, 
que
);

361 i‡(
T
->
rchûd
)

362 
	`Enqueue
(
T
->
rchûd
, 
que
);

365 (
p
 = (
BiTNode
 *)
	`P›
(
S
)))

366 
	`¥ötf
("%d ", 
p
->
d©a
);

367 
	`¥ötf
("\n");

368 
	`Di•o£Queue
(
que
);

369 
	`Di•o£Sèck
(
S
);

372 
	}
}

375 
öt32_t
 
	$GëHeight
(
BiTªe
 
T
)

377 
Queue
 
que
;

378 
BiTNode
 *
‰⁄t
, *
ª¨
, *
œ°
;

379 
Àvñ
 = 0;

381 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

382 
	`Enqueue
(
T
, 
que
);

383 
ª¨
 = 
œ°
 = 
T
;

385 (
T
 = 
	`Dequeue
(
que
))) {

386 
‰⁄t
 = 
T
;

387 i‡(
T
->
lchûd
) {

388 
	`Enqueue
(
T
->
lchûd
, 
que
);

389 
ª¨
 = 
T
->
lchûd
;

391 i‡(
T
->
rchûd
) {

392 
	`Enqueue
(
T
->
rchûd
, 
que
);

393 
ª¨
 = 
T
->
rchûd
;

395 i‡(
‰⁄t
 =
œ°
) {

396 
Àvñ
++;

397 
œ°
 = 
ª¨
;

401  
Àvñ
;

402 
	}
}

404 
BiTªe
 
	$PªInCª©
(
TEÀmTy≥
 
A
[], TEÀmTy≥ 
B
[], 
l1
, 
h1
, 
l2
, 
h2
)

406 
BiTªe
 
T
;

407 
i
, 
Œí
, 
æí
;

409 i‡(!(
T
 = (
BiTNode
 *)
	`mÆloc
((BiTNode))))

410  
NULL
;

412 
T
->
d©a
 = 
A
[
l1
];

413 
i
 = 
l2
; 
B
[i] !
T
->
d©a
; ++i)

415 i‡((
Œí
 = 
i
 - 
l2
))

416 
T
->
lchûd
 = 
	`PªInCª©
(
A
, 
B
, 
l1
+1,Ü1+
Œí
, 
l2
,Ü2+llen-1);

418 
T
->
lchûd
 = 
NULL
;

420 i‡((
æí
 = 
h2
 - 
i
))

421 
T
->
rchûd
 = 
	`PªInCª©
(
A
, 
B
, 
h1
-
æí
+1, h1, 
h2
-rlen+1, h2);

423 
T
->
rchûd
 = 
NULL
;

425  
T
;

426 
	}
}

428 
	$IsCom∂ëe
(
BiTªe
 
T
)

430 
Queue
 
que
;

432 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

433 
	`Enqueue
(
T
, 
que
);

435 !
	`IsEm±yQ
(
que
)) {

436 i‡((
T
 = 
	`Dequeue
(
que
))) {

437 
	`Enqueue
(
T
->
lchûd
, 
que
);

438 
	`Enqueue
(
T
->
rchûd
, 
que
);

440 !
	`IsEm±yQ
(
que
)) {

441 i‡((
T
 = 
	`Dequeue
(
que
)))

448 
	}
}

450 
	$Ds⁄Nodes
(
BiTªe
 
T
)

452 i‡(!
T
)

454 i‡(
T
->
lchûd
 && T->
rchûd
)

455  
	`Ds⁄Nodes
(
T
->
lchûd
Ë+ Ds⁄Nodes(T->
rchûd
) + 1;

457  
	`Ds⁄Nodes
(
T
->
lchûd
Ë+ Ds⁄Nodes(T->
rchûd
);

458 
	}
}

460 
	$Sw≠
(
BiTªe
 
T
)

462 
BiTNode
 *
p
;

464 i‡(
T
->
lchûd
)

465 
	`Sw≠
(
T
->
lchûd
);

466 i‡(
T
->
rchûd
)

467 
	`Sw≠
(
T
->
rchûd
);

469 
p
 = 
T
->
lchûd
;

470 
T
->
lchûd
 = T->
rchûd
;

471 
T
->
rchûd
 = 
p
;

474 
	}
}

476 
TEÀmTy≥
 
	$PªOrdîK
(
BiTªe
 
T
, 
k
)

478 
Sèck
 
S
;

479 
BiTNode
 *
p
;

480 
i
 = 0;

482 
S
 = 
	`Cª©eSèck
();

483 
p
 = 
T
;

485 
p
 || !
	`IsEm±y
(
S
)) {

486 i‡(
p
) {

487 
	`Push
(
p
, 
S
);

488 i‡(++
i
 =
k
)

489  
p
->
d©a
;

490 
p
 =Ö->
lchûd
;

492 
p
 = (
BiTNode
 *)
	`P›
(
S
);

493 
p
 =Ö->
rchûd
;

497 
	`Di•o£Sèck
(
S
);

499 
	}
}

501 
	$DñëeSubTªe
(
BiTªe
 
T
, 
TEÀmTy≥
 
x
)

503 
Queue
 
que
;

505 
que
 = 
	`Cª©eQueue
(
MaxTªeEÀmít
);

506 
	`Enqueue
(
T
, 
que
);

508 (
T
 = 
	`Dequeue
(
que
))) {

509 i‡(
T
->
lchûd
 && T->lchûd->
d©a
 =
x
) {

510 
	`De°roy
(
T
->
lchûd
);

511 
T
->
lchûd
 = 
NULL
;

513 
	`Enqueue
(
T
->
lchûd
, 
que
);

515 i‡(
T
->
rchûd
 && T->rchûd->
d©a
 =
x
) {

516 
	`De°roy
(
T
->
rchûd
);

517 
T
->
rchûd
 = 
NULL
;

519 
	`Enqueue
(
T
->
rchûd
, 
que
);

523 
	`Di•o£Queue
(
que
);

526 
	}
}

528 
	$SórchAn˚°‹
(
BiTªe
 
T
, 
TEÀmTy≥
 
x
)

530 
Sèck
 
S
;

531 
BiTNode
 *
p
, *
r
;

533 
S
 = 
	`Cª©eSèck
();

534 
p
 = 
T
;

536 
p
 || !
	`IsEm±y
(
S
)) {

537 i‡(
p
) {

538 
	`Push
(
p
, 
S
);

539 
p
 =Ö->
lchûd
;

541 
p
 = (
BiTNode
 *)
	`T›
(
S
);

542 i‡(
p
->
rchûd
 &&Ö->rchûd !
r
) {

543 
p
 =Ö->
rchûd
;

544 
	`Push
(
p
, 
S
);

545 
p
 =Ö->
lchûd
;

547 
p
 = (
BiTNode
 *)
	`P›
(
S
);

548 i‡(
p
->
d©a
 =
x
) {

549 !
	`IsEm±y
(
S
)) {

550 
p
 = (
BiTNode
 *)
	`P›
(
S
);

551 
	`¥ötf
("%d ", 
p
->
d©a
);

553 
	`¥ötf
("\n");

554 
	`Di•o£Sèck
(
S
);

557 
r
 = 
p
;

558 
p
 = 
NULL
;

563 
	`Di•o£Sèck
(
S
);

564 
	}
}

566 
	$Pª2Po°
(
TEÀmTy≥
 
¥e
[], 
l1
, 
h1
, TEÀmTy≥ 
po°
[], 
l2
, 
h2
)

568 
hÆf
;

570 i‡(
h1
 >
l1
) {

571 
po°
[
h2
] = 
¥e
[
l1
];

572 
hÆf
 = (
h1
 - 
l1
) / 2;

573 
	`Pª2Po°
(
¥e
, 
l1
+1,Ü1+
hÆf
, 
po°
, 
l2
,Ü2+half-1);

574 
	`Pª2Po°
(
¥e
, 
l1
+
hÆf
+1, 
h1
, 
po°
, 
l2
+hÆf, 
h2
-1);

578 
	}
}

609 
	$Li°Lóves
(
BiTªe
 
T
, BiTªê
li°
)

611 
Sèck
 
S
;

612 
BiTªe
 
p
;

613 
BiTNode
 *
¥e
;

615 
S
 = 
	`Cª©eSèck
();

616 
p
 = 
T
;

618 
p
 || !
	`IsEm±y
(
S
)) {

619 i‡(
p
) {

620 
	`Push
(
p
, 
S
);

621 
p
 =Ö->
lchûd
;

623 
p
 = (
BiTªe
)
	`P›
(
S
);

624 i‡(!
p
->
lchûd
 && !p->
rchûd
) {

625 i‡(!
li°
->
rchûd
) {

626 
li°
->
rchûd
 = 
p
;

627 
¥e
 = 
p
;

629 
¥e
->
rchûd
 = 
p
;

630 
¥e
 =Öª->
rchûd
;

633 
p
 =Ö->
rchûd
;

637 
	`Di•o£Sèck
(
S
);

639 
	}
}

641 
	$PrötLóves
(
BiTªe
 
li°
)

643 
BiTNode
 *
p
 = 
li°
->
rchûd
;

645 
p
) {

646 
	`¥ötf
("%d ", 
p
->
d©a
);

647 
p
 =Ö->
rchûd
;

649 
	`¥ötf
("\n");

650 
	}
}

652 
	$Simû¨
(
BiTªe
 
A
, BiTªê
B
)

654 i‡(
A
 && 
B
)

655  
	`Simû¨
(
A
->
lchûd
, 
B
->lchûdË&& Simû¨(A->
rchûd
, B->rchild);

656 i‡(!
A
 && !
B
)

657  
TRUE
;

659  
FALSE
;

660 
	}
}

676 
	$maö
()

678 
BiTªe
 
T1
, 
T2
;

679 
TEÀmTy≥
 
A
[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

681 
	`§™d
(
	`time
(
NULL
));

683 
T1
 = 
	`Cª©e
(
A
, 10);

684 
T2
 = 
	`Cª©e
(
A
, 10);

686 
	`PrötTªe
(
T1
);

687 
	`PrötTªe
(
T2
);

689 i‡(
	`Simû¨
(
T1
, 
T2
))

692 
	`De°roy
(
T1
);

693 
	`De°roy
(
T2
);

698 
BiTNode
 
li°
;

700 
li°
.
d©a
 = -1;

701 
li°
.
lchûd
 =Üi°.
rchûd
 = 
NULL
;

702 
	`Li°Lóves
(
T
, &
li°
);

703 
	`PrötLóves
(&
li°
);

705 
	`SórchAn˚°‹
(
T
, 10);

706 
i
 = 1; i <= 10; ++i)

707 
	`¥ötf
("PªOrdî No.%d: %d\n", 
i
, 
	`PªOrdîK
(
T
, i));

708 
	`Sw≠
(
T
);

709 
	`CompuãDi°AndDïth
(
T
);

710 
	`PrötTªe
(
T
);

711 
	`¥ötf
("Ds⁄Nodes: %d\n", 
	`Ds⁄Nodes
(
T
));

712 
	`De°roy
(
T
);

715 
T
 = 
	`Cª©e
(
A
, 10);

716 
	`CompuãDi°AndDïth
(
T
);

717 
	`PrötTªe
(
T
);

718 i‡(
	`IsCom∂ëe
(
T
))

720 
	`De°roy
(
T
);

723 
TEÀmTy≥
 
A
[] = {-1, 1, 3, 6, 9, 10, 5, 8, 2, 4, 7};

724 
TEÀmTy≥
 
B
[] = {-1, 9, 6, 10, 3, 8, 5, 1, 4, 2, 7};

725 
BiTªe
 
T
;

727 
T
 = 
	`PªInCª©
(
A
, 
B
, 1, 10, 1, 10);

728 
	`CompuãDi°AndDïth
(
T
);

729 
	`PrötTªe
(
T
);

731 
TEÀmTy≥
 
¥e
[7] = {1,2,3,4,5,6,7};

732 
TEÀmTy≥
 
po°
[7];

733 
i
;

735 
	`Pª2Po°
(
¥e
, 0, 6, 
po°
, 0, 6);

736 
i
 = 0; i < 7; ++i)

737 
	`¥ötf
("%d ", 
po°
[
i
]);

738 
	`¥ötf
("\n");

740 
	}
}

	@/home/tgni/workspace/alg/src/tree/bitree/tree.h

1 #i‚de‡
__TREE_H__


2 
	#__TREE_H__


	)

4 
	~"ty≥s.h
"

6 
	sBiTNode
 {

7 
TEÀmTy≥
 
	md©a
;

8 
BiTNode
 *
	mlchûd
, *
	mrchûd
;

9 
	mdïth
, 
	mdi°
;

10 } 
	tBiTNode
, *
	tBiTªe
;

12 
	$öt32_t
 (*
	tVisôFn
)(*
	tp
);

	@/home/tgni/workspace/alg/src/tree/bitree/types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

39 
	tTEÀmTy≥
;

41 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

42 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

45 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

46 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

47 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

48 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

51 
	#__i§__


	)

52 
	#__∂c_wq__


	)

53 
	#__tmr__


	)

56 
	#DISPLAY_MSG
 0

	)

58 
	#DISABLE
 0

	)

59 
	#ENABLE
 1

	)

61 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

62 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

63 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

64 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

65 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

67 #i‚de‡
NULL


68 
	#NULL
 0

	)

71 #i‚de‡
TRUE


72 
	#TRUE
 (1 =1)

	)

75 #i‚de‡
FALSE


76 
	#FALSE
 (!
TRUE
)

	)

79 #i‚de‡
OK


80 
	#OK
 0

	)

83 #i‚de‡
ERROR


84 
	#ERROR
 -1

	)

87 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

89 
uöt8_t
 
byã0
, 
byã1
;

91 
byã0
 = (
two
 & 0xff);

92 
byã1
 = (
two
 & 0xff00) >> 8;

94 i‡(
ídün
) {

95 *
addr
 = 
byã1
;

96 *(
addr
+1Ë
byã0
;

98 *
addr
 = 
byã0
;

99 *(
addr
+1Ë
byã1
;

103 
	}
}

105 
	#•lô_ªad_two
(
addr
, 
ídün
) \

106 ((
ídün
) ? \

107 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

108 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

110 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

112 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

114 
byã0
 = (
four
 & 0xff);

115 
byã1
 = (
four
 & 0xff00) >> 8;

116 
byã2
 = (
four
 & 0xff0000) >> 16;

117 
byã3
 = (
four
 & 0xff000000) >> 24;

119 i‡(
ídün
) {

120 *
addr
 = 
byã3
;

121 *(
addr
+1Ë
byã2
;

122 *(
addr
+2Ë
byã1
;

123 *(
addr
+3Ë
byã0
;

125 *
addr
 = 
byã0
;

126 *(
addr
+1Ë
byã1
;

127 *(
addr
+2Ë
byã2
;

128 *(
addr
+3Ë
byã3
;

131 
	}
}

134 
	#•lô_ªad_four
(
addr
, 
ídün
) \

135 ((
ídün
) ? \

136 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

137 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

139 
	#sw≠
(
a
, 
b
) do { \

140 
öt32_t
 
_tmp
 = (
a
); \

141 (
a
Ë(
b
); \

142 (
b
Ë
_tmp
; \

143 } 0)

	)

	@fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@queue.h

1 #i‚de‡
_Queue_h


2 
	#_Queue_h


	)

4 * 
	tEÀmítTy≥
;

5 
	gQueueRec‹d
;

6 
QueueRec‹d
 *
	tQueue
;

8 
IsFuŒ
–
Queue
 
Q
 );

9 
Queue
 
Cª©eQueue
–
MaxEÀmíts
 );

10 
Di•o£Queue
–
Queue
 
Q
 );

11 
Enqueue
–
EÀmítTy≥
 
X
, 
Queue
 
Q
 );

12 
EÀmítTy≥
 
Fr⁄t
–
Queue
 
Q
 );

13 
EÀmítTy≥
 
Dequeue
–
Queue
 
Q
 );

14 
IsEm±yQ
–
Queue
 
Q
 );

	@stack.h

1 #i‚de‡
_Sèck_h_


2 
	#_Sèck_h_


	)

4 
	~"ty≥s.h
"

6 
	gNode
;

7 
Node
 *
	tPåToNode
;

8 
PåToNode
 
	tSèck
;

9 * 
	tEÀmítTy≥
;

11 
IsEm±y
–
Sèck
 
S
 );

12 
Sèck
 
Cª©eSèck
( );

13 
Di•o£Sèck
–
Sèck
 
S
 );

14 
MakeEm±y
–
Sèck
 
S
 );

15 
Push
(
EÀmítTy≥
 
X
, 
Sèck
 
S
 );

16 
EÀmítTy≥
 
T›
–
Sèck
 
S
 );

17 
EÀmítTy≥
 
P›
–
Sèck
 
S
 );

	@tree.h

1 #i‚de‡
__TREE_H__


2 
	#__TREE_H__


	)

4 
	~"ty≥s.h
"

6 
	sBiTNode
 {

7 
TEÀmTy≥
 
	md©a
;

8 
BiTNode
 *
	mlchûd
, *
	mrchûd
;

9 
	mdïth
, 
	mdi°
;

10 } 
	tBiTNode
, *
	tBiTªe
;

12 
	$öt32_t
 (*
	tVisôFn
)(*
	tp
);

	@types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

39 
	tTEÀmTy≥
;

41 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

42 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

45 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

46 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

47 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

48 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

51 
	#__i§__


	)

52 
	#__∂c_wq__


	)

53 
	#__tmr__


	)

56 
	#DISPLAY_MSG
 0

	)

58 
	#DISABLE
 0

	)

59 
	#ENABLE
 1

	)

61 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

62 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

63 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

64 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

65 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

67 #i‚de‡
NULL


68 
	#NULL
 0

	)

71 #i‚de‡
TRUE


72 
	#TRUE
 (1 =1)

	)

75 #i‚de‡
FALSE


76 
	#FALSE
 (!
TRUE
)

	)

79 #i‚de‡
OK


80 
	#OK
 0

	)

83 #i‚de‡
ERROR


84 
	#ERROR
 -1

	)

87 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

89 
uöt8_t
 
byã0
, 
byã1
;

91 
byã0
 = (
two
 & 0xff);

92 
byã1
 = (
two
 & 0xff00) >> 8;

94 i‡(
ídün
) {

95 *
addr
 = 
byã1
;

96 *(
addr
+1Ë
byã0
;

98 *
addr
 = 
byã0
;

99 *(
addr
+1Ë
byã1
;

103 
	}
}

105 
	#•lô_ªad_two
(
addr
, 
ídün
) \

106 ((
ídün
) ? \

107 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

108 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

110 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

112 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

114 
byã0
 = (
four
 & 0xff);

115 
byã1
 = (
four
 & 0xff00) >> 8;

116 
byã2
 = (
four
 & 0xff0000) >> 16;

117 
byã3
 = (
four
 & 0xff000000) >> 24;

119 i‡(
ídün
) {

120 *
addr
 = 
byã3
;

121 *(
addr
+1Ë
byã2
;

122 *(
addr
+2Ë
byã1
;

123 *(
addr
+3Ë
byã0
;

125 *
addr
 = 
byã0
;

126 *(
addr
+1Ë
byã1
;

127 *(
addr
+2Ë
byã2
;

128 *(
addr
+3Ë
byã3
;

131 
	}
}

134 
	#•lô_ªad_four
(
addr
, 
ídün
) \

135 ((
ídün
) ? \

136 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

137 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

139 
	#sw≠
(
a
, 
b
) do { \

140 
öt32_t
 
_tmp
 = (
a
); \

141 (
a
Ë(
b
); \

142 (
b
Ë
_tmp
; \

143 } 0)

	)

	@
1
.
0
13
429
/home/tgni/workspace/alg/src/tree/bitree/fatal.h
/home/tgni/workspace/alg/src/tree/bitree/queue.c
/home/tgni/workspace/alg/src/tree/bitree/queue.h
/home/tgni/workspace/alg/src/tree/bitree/stack.c
/home/tgni/workspace/alg/src/tree/bitree/stack.h
/home/tgni/workspace/alg/src/tree/bitree/tree.c
/home/tgni/workspace/alg/src/tree/bitree/tree.h
/home/tgni/workspace/alg/src/tree/bitree/types.h
fatal.h
queue.h
stack.h
tree.h
types.h
