cscope 15 $HOME/workspace/alg/src/graph -q 0000000318 0000040959
	@/home/tgni/workspace/alg/src/graph/adj2matrix.c

1 
	#MaxVîãxNum
 100

	)

2 
	tVîãxTy≥
;

3 
	tEdgeTy≥
;

6 
VîãxTy≥
 
	mVex
[
MaxVîãxNum
];

7 
EdgeTy≥
 
	mEdge
[
MaxVîãxNum
][MaxVertexNum];

8 
	mvexnum
, 
	m¨˙um
;

9 } 
	tMGøph
;

12 
	sArcNode
 {

13 
	madjvex
;

14 
ArcNode
 *
	m√xt
;

15 } 
	tArcNode
;

17 
	sVNode
 {

18 
VîãxTy≥
 
	md©a
;

19 
ArcNode
 *
	mfú°
;

20 } 
	tVNode
, 
	tAdjLi°
[
MaxVîãxNum
];

23 
AdjLi°
 
	mvîti˚s
;

24 
	mvexnum
, 
	m¨˙um
;

25 } 
	tALGøph
;

28 
	$adj2m©rix
(
ALGøph
 *
A
, 
MGøph
 *
M
)

30 
i
;

31 
ArcNode
 *
p
;

33 
i
 = 0; i < 
A
->
vexnum
; ++i) {

34 
p
 = 
A
->
vîti˚s
[
i
].
fú°
;

36 
p
) {

37 
M
->
Edge
[
i
][
p
->
d©a
] = 1;

38 
p
 =Ö->
√xt
;

42 
M
.
vexnum
 = 
A
->vexnum;

43 
M
.
¨˙um
 = 
A
->arcnum;

46 
	}
}

	@/home/tgni/workspace/alg/src/graph/articulation.c

2 
	~< c°dio
>

3 
	~< io°ªam
>

4 
	~< queue
>

5 
	~<álg‹ôhm
>

7 
usög
 
«me•a˚
 
	g°d
;

9 
	#MAX_VERTEX_NUM
 100

	)

11 
	gCou¡î
;

12 
	gVisô
[
MAX_VERTEX_NUM
];

13 
	gNum
[
MAX_VERTEX_NUM
];

14 
	gLow
[
MAX_VERTEX_NUM
];

15 
	gP¨ít
[
MAX_VERTEX_NUM
];

16 
	gisAπ
[
MAX_VERTEX_NUM
];

18 
	$Inô_GlobÆ∑ø
()

20 
Cou¡î
=1;

21 
	`mem£t
(
Visô
,0,(Visit));

22 
	`mem£t
(
Num
,0,(Num));

23 
	`mem£t
(
Low
,0,(Low));

24 
	`mem£t
(
P¨ít
,0,(Parent));

25 
	`mem£t
(
isAπ
,0,(isArt));

26 
	}
}

28 
	sEdgeNode


30 
	madjVîãx
;

31 
EdgeNode
 *
	m√xtEdgeNode
;

32 }
	tEdgeNode
;

34 
	sVîNode


36 
	md©a
;

37 
EdgeNode
 *
	mfú°edge
;

38 }
	tVîNode
;

40 
	sGøph


42 
VîNode
 
	mvîNode
[
MAX_VERTEX_NUM
];

43 
	mvîãx_num
,
	medge_num
;

44 }
	tGøph
;

46 
	$Cª©eDAG
(
Gøph
 &
G
,
n
,
e
)

48 
k
;

49 
v
,
i
,
j
;

50 
G
.
vîãx_num
=
n
;

51 
G
.
edge_num
=
e
;

52 
EdgeNode
 *
p
;

54 
k
=1;k<=
n
;k++)

56 
cö
>>
v
;

57 
G
.
vîNode
[
k
].
d©a
=(
v
-'A'+1);

58 
G
.
vîNode
[
k
].
fú°edge
=
NULL
;

60 
k
=1;k<=
e
;k++)

62 
cö
>>
i
>>
j
;

64 
p
=
√w
 
EdgeNode
;

65 
p
->
adjVîãx
=(
j
-'A'+1);

66 
p
->
√xtEdgeNode
=
G
.
vîNode
[
i
-'A'+1].
fú°edge
;

67 
G
.
vîNode
[
i
-'A'+1].
fú°edge
=
p
;

69 
p
=
√w
 
EdgeNode
;

70 
p
->
adjVîãx
=(
i
-'A'+1);

71 
p
->
√xtEdgeNode
=
G
.
vîNode
[
j
-'A'+1].
fú°edge
;

72 
G
.
vîNode
[
j
-'A'+1].
fú°edge
=
p
;

74 
	}
}

76 
	$FödAπ
(
Gøph
 &
G
,
Vît
)

78 
chûdªn
=0;

79 
Vnum
=(
Vît
-'A'+1);

80 
EdgeNode
 *
w
;

81 
w
=
G
.
vîNode
[
Vnum
].
fú°edge
;

82 
Visô
[
Vnum
]=1;

84 
Low
[
Vnum
]=
Num
[Vnum]=
Cou¡î
++;

86 
w
)

88 
Wnum
=
w
->
adjVîãx
;

89 if(!
Visô
[
Wnum
])

91 
chûdªn
++;

92 
P¨ít
[
Wnum
]=(
Vît
-'A'+1);

93 
	`FödAπ
(
G
,(
Wnum
-1+'A'));

	@/home/tgni/workspace/alg/src/graph/binheap.c

1 
	~"böhóp.h
"

2 
	~"Áèl.h
"

3 
	~<°dlib.h
>

5 
	#MöPQSize
 (10)

	)

6 
	#MöD©a
 (-32767)

	)

8 
	$E˝y
(
HópEÀmTy≥
 *
d
, HópEÀmTy≥ *
s
)

10 
d
->
v
 = 
s
->v;

11 
d
->
dv
 = 
s
->dv;

12 
	}
}

15 
	$Ecmp
(
HópEÀmTy≥
 *
b
, HópEÀmTy≥ *
s
)

17 i‡(
b
->
dv
 >
s
->dv)

21 
	}
}

23 
	$MakeEm±y
–
Pri‹ôyQueue
 
H
 )

25 
H
->
Size
 = 0;

26 
	}
}

28 
	$IsEm±y
–
Pri‹ôyQueue
 
H
 )

30  
H
->
Size
 == 0;

31 
	}
}

33 
	$IsFuŒ
–
Pri‹ôyQueue
 
H
 )

35  
H
->
Size
 =H->
C≠acôy
;

36 
	}
}

40 
	$In£π
–
HópEÀmTy≥
 
X
, 
Pri‹ôyQueue
 
H
 )

42 
i
;

44 if–
	`IsFuŒ
–
H
 ) )

46 
	`Eº‹
( "Priority queue is full" );

50  
i
 = ++
H
->
Size
; 
	`Ecmp
(&H->
EÀmíts
[ i / 2 ], &
X
); i /= 2 )

52 
	`E˝y
(&
H
->
EÀmíts
[ 
i
 ], &H->Elements[ i / 2 ]);

54 
	`E˝y
(&
H
->
EÀmíts
[ 
i
 ], &
X
);

55 
	}
}

57 
HópEÀmTy≥
 
	$DñëeMö
–
Pri‹ôyQueue
 
H
 )

59 
i
, 
Chûd
;

60 
HópEÀmTy≥
 
MöEÀmít
, 
La°EÀmít
;

62 if–
	`IsEm±y
–
H
 ) )

64 
	`Eº‹
( "Priority queue isÉmpty" );

65  
H
->
EÀmíts
[ 0 ];

67 
	`E˝y
(&
MöEÀmít
, &
H
->
EÀmíts
[ 1 ]);

68 
	`E˝y
(&
La°EÀmít
, &
H
->
EÀmíts
[ H->
Size
-- ]);

70  
i
 = 1; i * 2 <
H
->
Size
; i = 
Chûd
 )

73 
Chûd
 = 
i
 * 2;

74 if–
Chûd
 !
H
->
Size


75 && 
	`Ecmp
(&
H
->
EÀmíts
[ 
Chûd
 ], &H->Elements[ Child + 1]) )

76 
Chûd
++;

79 i‡–
	`Ecmp
(&
La°EÀmít
, &
H
->
EÀmíts
[ 
Chûd
 ]) )

80 
	`E˝y
(&
H
->
EÀmíts
[ 
i
 ], &H->EÀmíts[ 
Chûd
 ]);

84 
	`E˝y
(&
H
->
EÀmíts
[ 
i
 ], &
La°EÀmít
);

85  
MöEÀmít
;

86 
	}
}

88 
HópEÀmTy≥
 
	$FödMö
–
Pri‹ôyQueue
 
H
 )

90 if–!
	`IsEm±y
–
H
 ) )

91  
H
->
EÀmíts
[ 1 ];

92 
	`Eº‹
( "Priority Queue is Empty" );

93  
H
->
EÀmíts
[ 0 ];

94 
	}
}

96 
	$De°roy
–
Pri‹ôyQueue
 
H
 )

98 
	`‰ì
–
H
->
EÀmíts
 );

99 
	`‰ì
–
H
 );

100 
	}
}

103 
Pri‹ôyQueue
 
	$Inôülize
–
MaxEÀmíts
 )

105 
Pri‹ôyQueue
 
H
;

107 if–
MaxEÀmíts
 < 
MöPQSize
 )

108 
	`Eº‹
( "Priority queue size isÅoo small" );

110 
H
 = 
	`mÆloc
––
HópSåu˘
 ) );

111 if–
H
 ==
NULL
 )

112 
	`F©ÆEº‹
( "Out of space!!!" );

115 
H
->
EÀmíts
 = 
	`mÆloc
––
MaxEÀmíts
 + 1 )

116 * –
HópEÀmTy≥
 ) );

117 if–
H
->
EÀmíts
 =
NULL
 )

118 
	`F©ÆEº‹
( "Out of space!!!" );

120 
H
->
C≠acôy
 = 
MaxEÀmíts
;

121 
H
->
Size
 = 0;

122 
H
->
EÀmíts
[ 0 ].
dv
 = 
MöD©a
;

123 
H
->
EÀmíts
[ 0 ].
v
 = 0;

125 
H
->
MakeEm±y
 = MakeEmpty;

126 
H
->
In£π
 = Insert;

127 
H
->
DñëeMö
 = DeleteMin;

128 
H
->
FödMö
 = FindMin;

129 
H
->
IsEm±y
 = IsEmpty;

130 
H
->
IsFuŒ
 = IsFull;

132  
H
;

133 
	}
}

	@/home/tgni/workspace/alg/src/graph/binheap.h

1 #i‚de‡
_BöHóp_H


2 
	#_BöHóp_H


	)

4 
	stbl_s
 {

5 
	mv
;

6 
	mdv
;

9 
tbl_s
 
	tHópEÀmTy≥
;

10 
HópSåu˘
 *
	tPri‹ôyQueue
;

12 
	sHópSåu˘
 {

13 
	mC≠acôy
;

14 
	mSize
;

15 
HópEÀmTy≥
 *
	mEÀmíts
;

17 (*
	mMakeEm±y
)–
Pri‹ôyQueue
 
	mH
 );

18 (*
	mIn£π
)–
HópEÀmTy≥
 
	mX
, 
Pri‹ôyQueue
 
	mH
 );

19 
HópEÀmTy≥
 (*
DñëeMö
)–
Pri‹ôyQueue
 
	mH
 );

20 
HópEÀmTy≥
 (*
FödMö
)–
Pri‹ôyQueue
 
	mH
 );

21 (*
	mIsEm±y
)–
Pri‹ôyQueue
 
	mH
 );

22 (*
	mIsFuŒ
)–
Pri‹ôyQueue
 
	mH
 );

23 } 
	tHópSåu˘
;

26 
Pri‹ôyQueue
 
Inôülize
–
MaxEÀmíts
 );

27 
De°roy
–
Pri‹ôyQueue
 
H
 );

	@/home/tgni/workspace/alg/src/graph/fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@/home/tgni/workspace/alg/src/graph/graph.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"ty≥s.h
"

5 
	~"li°.h
"

6 
	~"queue.h
"

7 
	~"böhóp.h
"

8 
	~"°ack.h
"

10 
	#KEY
(
x
Ë(x - 1)

	)

11 
	#Inföôy
 (0xFFFF)

	)

12 
	#NŸAVîãx
 (-1)

	)

14 
	sóge
 {

15 
öt32_t
 
	mÀ·
;

16 
öt32_t
 
	mright
;

17 
uöt32_t
 
	mweight
;

18 
li°_hód_t
 
	mnode
;

19 } *
	tEage
;

21 
	sªc‹d
 {

22 
öt32_t
 
	mknown
;

23 
öt32_t
 
	mdv
;

24 
öt32_t
 
	mpv
;

25 } *
	tRec‹d
;

27 
	sgøph
 {

28 
öt32_t
 
	mvîti˚s
;

29 
öt32_t
 
	móges
;

30 
öt32_t
 *
	mödegªe
;

31 
ªc‹d
 *
	mªc‹d
;

32 
li°_hód_t
 *
	mli°
;

33 } *
	tGøph
;

35 
gøph
 *
	$¸óã_gøph
(
öt32_t
 
vîãx_num
, i¡32_à
óge_num
)

37 
gøph
 *
g
;

38 
uöt32_t
 
i
;

40 
g
 = (
gøph
 *)
	`mÆloc
((graph));

42 
g
->
li°
 = (
li°_hód
 *)
	`mÆloc
((li°_hódË* 
vîãx_num
);

43 
i
 = 0; i < 
vîãx_num
; i++) {

44 
	`INIT_LIST_HEAD
(&
g
->
li°
[
i
]);

47 
g
->
ödegªe
 = (
öt32_t
 *)
	`mÆloc
((öt32_tË* 
vîãx_num
);

48 
	`mem£t
(
g
->
ödegªe
, 0, (
öt32_t
Ë* 
vîãx_num
);

50 
g
->
ªc‹d
 = (ªc‹d *)
	`mÆloc
((ªc‹dË* 
vîãx_num
);

51 
i
 = 0; i < 
vîãx_num
; i++) {

52 
g
->
ªc‹d
[
i
].
known
 = 
FALSE
;

53 
g
->
ªc‹d
[
i
].
dv
 = 
Inföôy
;

54 
g
->
ªc‹d
[
i
].
pv
 = 
NŸAVîãx
;

57 
g
->
óges
 = 
óge_num
;

58 
g
->
vîti˚s
 = 
vîãx_num
;

60  
g
;

61 
	}
}

63 
	$de°roy_gøph
(
gøph
 *
g
)

65 i‡(!
g
)

67 i‡(
g
->
li°
)

68 
	`‰ì
(
g
->
li°
);

69 
	`‰ì
(
g
);

70 
	}
}

72 
	$show_gøph
(
gøph
 *
g
)

74 
óge
 *
e
;

75 
öt32_t
 
i
;

77 
i
 = 0; i < 
g
->
vîti˚s
; i++) {

78 
	`¥ötf
("[%d]", 
i
 + 1);

79 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
i
], 
node
) {

80 
	`¥ötf
(" --> [%d]", 
e
->
right
);

82 
	`¥ötf
("\n");

84 
	}
}

86 
óge
 *
	$quîy_óge
(
gøph
 *
g
, 
öt32_t
 
u
, i¡32_à
v
)

88 
óge
 *
e
;

90 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
u
)], 
node
) {

91 i‡((
e
->
À·
 =
u
Ë&& (e->
right
 =
v
))

92  
e
;

94  
NULL
;

95 
	}
}

99 
óge
 *
	$add_óge
(
gøph
 *
g
, 
öt32_t
 
u
, i¡32_à
v
, 
uöt32_t
 
weight
)

101 
óge
 *
e
;

102 
öt32_t
 
key
;

104 
e
 = (
óge
 *)
	`mÆloc
((eage));

106 
e
->
À·
 = 
u
;

107 
e
->
right
 = 
v
;

108 
e
->
weight
 = weight;

110 
key
 = 
	`KEY
(
u
);

111 
	`li°_add_èû
(&
e
->
node
, &
g
->
li°
[
key
]);

113  
e
;

114 
	}
}

116 
öt32_t
 
	$ªmove_óge
(
gøph
 *
g
, 
öt32_t
 
u
, i¡32_à
v
)

118 
óge
 *
e
;

119 
e
 = 
	`quîy_óge
(
g
, 
u
, 
v
);

120 i‡(!
e
)

121  
ERROR
;

123 
	`li°_dñ
(&
e
->
node
);

124 
	`‰ì
(
e
);

125  
OK
;

126 
	}
}

128 
öt32_t
 
	$¸óã_ödegªe
(
gøph
 *
g
)

130 
óge
 *
e
;

131 
öt32_t
 
i
;

133 
	`mem£t
(
g
->
ödegªe
, 0, (
öt32_t
Ë* g->
vîti˚s
);

134 
i
 = 0; i < 
g
->
vîti˚s
; i++) {

135 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
i
], 
node
) {

136 
g
->
ödegªe
[
	`KEY
(
e
->
right
)]++;

139  
OK
;

140 
	}
}

142 
	$t›_s‹t
(
gøph
 *
g
)

144 
Queue
 
q
;

145 
óge
 *
e
;

147 
öt32_t
 
cou¡î
 = 0, 
v
;

149 
q
 = 
	`Cª©eQueue
(
g
->
vîti˚s
);

151 
v
 = 1; v <
g
->
vîti˚s
; v++)

152 i‡(
g
->
ödegªe
[
	`KEY
(
v
)] == 0)

153 
q
->
	`Enqueue
(
v
, q);

155 
	`¥ötf
("top sort: \n");

156 !
q
->
	`IsEm±y
(q)) {

157 
v
 = 
q
->
	`Dequeue
(q);

159 
	`¥ötf
("v%d ", 
v
);

160 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

161 i‡(--
g
->
ödegªe
[
	`KEY
(
e
->
right
)] == 0)

162 
q
->
	`Enqueue
(
e
->
right
, q);

165 
	`¥ötf
("\n");

167 
	`Di•o£Queue
(
q
);

169 
	}
}

172 
	$unweighãd
(
gøph
 *
g
, 
öt32_t
 
s
)

174 
Queue
 
q
;

175 
QueueOps
 *
›
;

176 
óge
 *
e
;

177 
ªc‹d
 *
r
;

178 
li°_hód
 *
h
;

179 
öt32_t
 
key
, 
v
, 
w
;

181 
q
 = 
	`Cª©eQueue
(
g
->
vîti˚s
);

182 
›
 = 
	`Regi°îQueueOps
();

183 
›
->
	`MakeEm±y
(
q
);

185 
r
 = 
g
->
ªc‹d
;

186 
r
[
	`KEY
(
s
)].
dv
 = 0;

187 
›
->
	`Enqueue
(
s
, 
q
);

189 !
›
->
	`IsEm±y
(
q
)) {

190 
v
 = 
›
->
	`Fr⁄tAndDequeue
(
q
);

191 
r
[
	`KEY
(
v
)].
known
 = 1;

193 
	`li°_f‹_óch_íåy
(
e
, 
h
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

194 i‡(
r
[
	`KEY
(
e
->
right
)].
dv
 =
Inföôy
) {

195 
r
[
	`KEY
(
e
->
right
)].
dv
 =Ñ[KEY(
v
)].dv + 1;

196 
r
[
	`KEY
(
e
->
right
)].
pv
 = 
v
;

197 
›
->
	`Enqueue
(
e
->
right
, 
q
);

201 
	`Di•o£Queue
(
q
);

202 
	`UnRegi°îQueueOps
(
›
);

203 
	}
}

206 
	$BFS
(
Gøph
 
g
, 
s
)

208 
Queue
 
q
;

209 
Eage
 
e
;

210 
v
;

212 
	`¥ötf
("%d ", 
s
);

213 
g
->
ªc‹d
[
	`KEY
(
s
)].
known
 = 
TRUE
;

215 
q
 = 
	`Cª©eQueue
(
g
->
vîti˚s
);

216 
q
->
	`Enqueue
(
s
, q);

218 !
q
->
	`IsEm±y
(q)) {

219 
v
 = 
q
->
	`Dequeue
(q);

221 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

222 i‡(!
g
->
ªc‹d
[
	`KEY
(
e
->
right
)].
known
) {

223 
g
->
ªc‹d
[
	`KEY
(
e
->
right
)].
known
 = 
TRUE
;

224 
	`¥ötf
("%d ", 
e
->
right
);

225 
q
->
	`Enqueue
(
e
->
right
, q);

231 
	}
}

233 
	$BFSTøvî£
(
Gøph
 
g
)

235 
i
;

237 
	`¥ötf
("BFS: ");

238 
i
 = 1; i <
g
->
vîti˚s
; ++i)

239 
g
->
ªc‹d
[
	`KEY
(
i
)].
known
 = 
FALSE
;

242 
i
 = 1; i <
g
->
vîti˚s
; ++i) {

243 i‡(!
g
->
ªc‹d
[
	`KEY
(
i
)].
known
)

244 
	`BFS
(
g
, 
i
);

246 
	`¥ötf
("\n");

249 
	}
}

251 
	$DFS
(
Gøph
 
g
, 
v
)

253 
Eage
 
e
;

255 
	`¥ötf
("%d ", 
v
);

256 
g
->
ªc‹d
[
	`KEY
(
v
)].
known
 = 
TRUE
;

258 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

259 i‡(!
g
->
ªc‹d
[
	`KEY
(
e
->
right
)].
known
) {

260 
	`DFS
(
g
, 
e
->
right
);

265 
	}
}

267 
	$DFSNoRC
(
Gøph
 
g
, 
v
)

269 
Sèck
 
s
;

270 
Eage
 
e
;

271 
k
;

273 
s
 = 
	`Cª©eSèck
();

275 
	`Push
(
v
, 
s
);

276 
g
->
ªc‹d
[
	`KEY
(
v
)].
known
 = 
TRUE
;

278 !
	`SèckIsEm±y
(
s
)) {

279 
k
 = 
	`P›
(
s
);

280 
	`¥ötf
("%d ", 
k
);

282 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

283 i‡(!
g
->
ªc‹d
[
	`KEY
(
e
->
right
)].
known
) {

284 
	`Push
(
e
->
right
, 
s
);

285 
g
->
ªc‹d
[
	`KEY
(
e
->
right
)].
known
 = 
TRUE
;

290 
	`Di•o£Sèck
(
s
);

293 
	}
}

296 
	#RC_MODE
 1

	)

297 
	#NONRC_MODE
 0

	)

298 
	$DFSTøvî£
(
Gøph
 
g
, 
mode
)

300 
i
;

302 
	`¥ötf
("DFS: ");

303 
i
 = 1; i <
g
->
vîti˚s
; ++i)

304 
g
->
ªc‹d
[
	`KEY
(
i
)].
known
 = 
FALSE
;

306 
i
 = 1; i <
g
->
vîti˚s
; ++i) {

307 i‡(!
g
->
ªc‹d
[
	`KEY
(
i
)].
known
)

308 i‡(
mode
) {

309 
	`DFS
(
g
, 
i
);

311 
	`DFSNoRC
(
g
, 
i
);

314 
	`¥ötf
("\n");

317 
	}
}

322 
	$Dijk°ø
(
gøph
 *
g
, 
öt32_t
 
s
)

324 
öt32_t
 
v
, 
w
;

325 
Pri‹ôyQueue
 
q
;

326 
tbl_s
 
t
;

327 
óge
 *
e
;

328 
ªc‹d
 *
r
;

330 
r
 = 
g
->
ªc‹d
;

331 
q
 = 
	`Inôülize
(
g
->
óges
);

332 
g
->
ªc‹d
[
	`KEY
(
s
)].
dv
 = 0;

333 
t
.
v
 = 
s
;

334 
t
.
dv
 = 0;

335 
q
->
	`In£π
(
t
, q);

337 !
q
->
	`IsEm±y
(q)) {

338 
t
 = 
q
->
	`DñëeMö
(q);

339 
v
 = 
t
.v;

341 i‡(
v
 =
NŸAVîãx
)

343 
r
[
	`KEY
(
v
)].
known
 = 
TRUE
;

344 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

345 
w
 = 
e
->
right
;

346 i‡(!
r
[
	`KEY
(
w
)].
known
) {

347 i‡(
r
[
	`KEY
(
v
)].
dv
 + 
e
->
weight
 <Ñ[KEY(
w
)].dv) {

348 
r
[
	`KEY
(
w
)].
dv
 =Ñ[KEY(
v
)].dv + 
e
->
weight
;

349 
t
.
v
 = 
w
;

350 
t
.
dv
 = 
r
[
	`KEY
(
v
)].dv + 
e
->
weight
;

352 
q
->
	`In£π
(
t
, q);

353 
r
[
	`KEY
(
w
)].
pv
 = 
v
;

359 
	`De°roy
(
q
);

360 
	}
}

362 
	$Prim
(
gøph
 *
g
, 
öt32_t
 
s
)

364 
öt32_t
 
v
, 
w
;

365 
Pri‹ôyQueue
 
q
;

366 
tbl_s
 
t
;

367 
óge
 *
e
;

368 
ªc‹d
 *
r
;

370 
r
 = 
g
->
ªc‹d
;

371 
q
 = 
	`Inôülize
(
g
->
óges
);

372 
g
->
ªc‹d
[
	`KEY
(
s
)].
dv
 = 0;

373 
t
.
v
 = 
s
;

374 
t
.
dv
 = 0;

375 
q
->
	`In£π
(
t
, q);

377 !
q
->
	`IsEm±y
(q)) {

378 
t
 = 
q
->
	`DñëeMö
(q);

379 
v
 = 
t
.v;

381 i‡(
v
 =
NŸAVîãx
)

383 
r
[
	`KEY
(
v
)].
known
 = 
TRUE
;

384 
	`li°_f‹_óch_íåy
(
e
, &
g
->
li°
[
	`KEY
(
v
)], 
node
) {

385 
w
 = 
e
->
right
;

386 i‡(!
r
[
	`KEY
(
w
)].
known
) {

387 i‡(
e
->
weight
 < 
r
[
	`KEY
(
w
)].
dv
) {

388 
r
[
	`KEY
(
w
)].
dv
 = 
e
->
weight
;

389 
t
.
v
 = 
w
;

390 
t
.
dv
 = 
e
->
weight
;

392 
q
->
	`In£π
(
t
, q);

393 
r
[
	`KEY
(
w
)].
pv
 = 
v
;

398 
	`De°roy
(
q
);

399 
	}
}

411 
öt32_t
 
	$gøph_ã°
()

413 
gøph
 *
g
;

414 
öt32_t
 
e
[12][2] = {

422 
öt32_t
 
i
;

424 
g
 = 
	`¸óã_gøph
(7, 12);

425 
i
 = 0; i < 12; i++)

426 
	`add_óge
(
g
, 
e
[
i
][0],É[i][1], 1);

427 
	`show_gøph
(
g
);

428 
	`BFSTøvî£
(
g
);

429 
	`DFSTøvî£
(
g
, 
RC_MODE
);

430 
	`DFSTøvî£
(
g
, 
NONRC_MODE
);

431 
	`¸óã_ödegªe
(
g
);

432 
	`t›_s‹t
(
g
);

434  
OK
;

435 
	}
}

437 
	$¥öt_∑th
(
öt32_t
 
v
, 
gøph
 *
g
)

439 
öt32_t
 
i
;

440 i‡(
g
->
ªc‹d
[
	`KEY
(
v
)].
pv
 !
NŸAVîãx
) {

441 
	`¥öt_∑th
(
g
->
ªc‹d
[
	`KEY
(
v
)].
pv
, g);

442 
	`¥ötf
("Åo ");

444 
	`¥ötf
–"%d", 
v
);

445 
	}
}

457 
öt32_t
 
	$unweighãd_ã°
()

459 
gøph
 *
g
;

460 
öt32_t
 
e
[12][2] = {

468 
öt32_t
 
i
;

469 
g
 = 
	`¸óã_gøph
(7, 12);

470 
i
 = 0; i < 12; i++)

471 
	`add_óge
(
g
, 
e
[
i
][0],É[i][1], 1);

472 
	`show_gøph
(
g
);

474 
i
 = 0; i < 
g
->
vîti˚s
; i++) {

475 
	`¥öt_∑th
(
i
 + 1, 
g
);

476 
	`¥ötf
("\n");

478  
OK
;

479 
	}
}

491 
öt32_t
 
	$weighãd_ã°
()

493 
gøph
 *
g
;

494 
öt32_t
 
e
[12][3] = {

502 
öt32_t
 
i
;

504 
g
 = 
	`¸óã_gøph
(7, 12);

505 
i
 = 0; i < 12; i++)

506 
	`add_óge
(
g
, 
e
[
i
][0],É[i][1],É[i][2]);

507 
	`show_gøph
(
g
);

508 
	`Dijk°ø
(
g
, 1);

509 
i
 = 0; i < 
g
->
vîti˚s
; i++) {

510 
	`¥öt_∑th
(
i
 + 1, 
g
);

511 
	`¥ötf
("\n");

513  
OK
;

514 
	}
}

519 
öt32_t
 
	$undúe˘ed_gøph_ã°
()

521 
gøph
 *
g
;

525 
öt32_t
 
e
[24][3] = {

534 
öt32_t
 
i
;

536 
g
 = 
	`¸óã_gøph
(7, 24);

537 
i
 = 0; i < 24; i++)

538 
	`add_óge
(
g
, 
e
[
i
][0],É[i][1],É[i][2]);

539 
	`show_gøph
(
g
);

540 
	`Prim
(
g
, 4);

541 
i
 = 0; i < 
g
->
vîti˚s
; i++) {

542 
	`¥öt_∑th
(
i
 + 1, 
g
);

543 
	`¥ötf
("\n");

545  
OK
;

546 
	}
}

547 
öt32_t
 
	$maö
()

549 
	`gøph_ã°
();

552  
OK
;

553 
	}
}

	@/home/tgni/workspace/alg/src/graph/list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

15 
	sli°_hód
 {

16 
li°_hód
 *
	m√xt
, *
	m¥ev
;

19 
li°_hód
 
	tli°_hód_t
;

21 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

23 
	#LIST_HEAD
(
«me
) \

24 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

26 
	#INIT_LIST_HEAD
(
±r
) do { \

27 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

28 } 0)

	)

38 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
_√w
,

39 
li°_hód
 * 
_¥ev
,

40 
li°_hód
 * 
_√xt
)

42 
_√xt
->
¥ev
 = 
_√w
;

43 
_√w
->
√xt
 = 
_√xt
;

44 
_√w
->
¥ev
 = 
_¥ev
;

45 
_¥ev
->
√xt
 = 
_√w
;

46 
	}
}

48 
	#__li°_add
(
_√w
, 
_¥ev
, 
_√xt
) do { \

49 
li°_hód
 *
__√w
 = 
_√w
; \

50 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

51 
li°_hód
 *
__√xt
 = 
_√xt
; \

53 (
__√xt
)->
¥ev
 = (
__√w
); \

54 (
__√w
)->
√xt
 = (
__√xt
); \

55 (
__√w
)->
¥ev
 = (
__¥ev
); \

56 (
__¥ev
)->
√xt
 = (
__√w
); \

57 } 0)

	)

70 
__ölöe__
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

72 
	`__li°_add
(
_√w
, 
_hód
, _hód->
√xt
);

73 
	}
}

75 
	#li°_add
(
_√w
, 
_hód
) do { \

76 
	`__li°_add
(
_√w
, 
_hód
, (_hód)->
√xt
); \

77 } 0)

	)

90 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

92 
	`__li°_add
(
_√w
, 
_hód
->
¥ev
, _head);

93 
	}
}

95 
	#li°_add_èû
(
_√w
, 
_hód
) do { \

96 
	`__li°_add
(
_√w
, (
_hód
)->
¥ev
, _head); \

97 } 0)

	)

109 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
_¥ev
,

110 
li°_hód
 * 
_√xt
)

112 
_√xt
->
¥ev
 = 
_¥ev
;

113 
_¥ev
->
√xt
 = 
_√xt
;

114 
	}
}

116 
	#__li°_dñ
(
_¥ev
, 
_√xt
) do { \

117 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

118 
li°_hód
 *
__√xt
 = 
_√xt
; \

120 (
__√xt
)->
¥ev
 = (
__¥ev
); \

121 (
__¥ev
)->
√xt
 = (
__√xt
); \

122 } 0)

	)

132 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
_íåy
)

134 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

135 
_íåy
->
√xt
 = _íåy->
¥ev
 = 0;

136 
	}
}

138 
	#li°_dñ
(
_íåy
) do { \

139 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

140 (
_íåy
)->
√xt
 = (_íåy)->
¥ev
 = 0; \

141 } 0)

	)

150 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
_íåy
)

152 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

153 
	`INIT_LIST_HEAD
(
_íåy
);

154 
	}
}

156 
	#li°_dñ_öô
(
_íåy
) do { \

157 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

158 
	`INIT_LIST_HEAD
(
_íåy
); \

159 } 0)

	)

168 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
_hód
)

170  
_hód
->
√xt
 == _head;

171 
	}
}

173 
	#li°_em±y
(
_hód
) \

174 –(
_hód
)->
√xt
 =(_hódË)

	)

178 
__ölöe__
 
	$li°_em±y_⁄e
(
li°_hód
 *
_hód
)

180  
_hód
->
√xt
 =_hód->
¥ev
;

181 
	}
}

189 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

191 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

193 i‡(
fú°
 !
li°
) {

194 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

195 
li°_hód
 *
©
 = 
hód
->
√xt
;

197 
fú°
->
¥ev
 = 
hód
;

198 
hód
->
√xt
 = 
fú°
;

200 
œ°
->
√xt
 = 
©
;

201 
©
->
¥ev
 = 
œ°
;

203 
	}
}

205 
	#off£tof
(
TYPE
, 
MEMBER
Ë((Ë&((TYPE *)0)->MEMBER)

	)

214 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

215 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

216 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

224 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

225 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

233 
	#li°_f‹_óch
(
pos
, 
hód
) \

234 
pos
 = (
hód
)->
√xt
;Öos != (head); \

235 
pos
 =Öos->
√xt
)

	)

237 
	#li°_f‹_óch_ªvî£
(
pos
, 
hód
) \

238 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

239 
pos
 =Öos->
¥ev
)

	)

248 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

249 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

250 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

252 
	#li°_f‹_óch_ß„_ªvî£
(
pos
, 
n
, 
hód
) \

253 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

254 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

262 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

263 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

264 &
pos
->
membî
 !(
hód
); \

265 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

273 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

274 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

275 &
pos
->
membî
 !(
hód
); \

276 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

285 
	shli°_hód
 {

286 
hli°_node
 *
	mfú°
;

289 
	shli°_node
 {

290 
hli°_node
 *
	m√xt
, **
	mµªv
;

293 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

294 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

295 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

296 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

298 
h
->
√xt
 = 
NULL
;

299 
h
->
µªv
 = 
NULL
;

300 
	}
}

302 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

304  !
h
->
µªv
;

305 
	}
}

307 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

309  !
h
->
fú°
;

310 
	}
}

312 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

314 
hli°_node
 *
√xt
 = 
n
->next;

315 
hli°_node
 **
µªv
 = 
n
->pprev;

316 *
µªv
 = 
√xt
;

317 i‡(
√xt
)

318 
√xt
->
µªv
 =Öprev;

319 
	}
}

321 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

323 
	`__hli°_dñ
(
n
);

324 
n
->
√xt
 = 0;

325 
n
->
µªv
 = 0;

326 
	}
}

328 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

330 i‡(!
	`hli°_unhashed
(
n
)) {

331 
	`__hli°_dñ
(
n
);

332 
	`INIT_HLIST_NODE
(
n
);

334 
	}
}

336 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

338 
hli°_node
 *
fú°
 = 
h
->first;

339 
n
->
√xt
 = 
fú°
;

340 i‡(
fú°
)

341 
fú°
->
µªv
 = &
n
->
√xt
;

342 
h
->
fú°
 = 
n
;

343 
n
->
µªv
 = &
h
->
fú°
;

344 
	}
}

347 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

348 
hli°_node
 *
√xt
)

350 
n
->
µªv
 = 
√xt
->pprev;

351 
n
->
√xt
 =Çext;

352 
√xt
->
µªv
 = &
n
->next;

353 *(
n
->
µªv
) =Ç;

354 
	}
}

356 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

357 
hli°_node
 *
√xt
)

359 
√xt
->√xà
n
->next;

360 
n
->
√xt
 =Çext;

361 
√xt
->
µªv
 = &
n
->next;

363 if(
√xt
->next)

364 
√xt
->√xt->
µªv
 = &next->next;

365 
	}
}

371 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

372 
hli°_hód
 *
√w
)

374 
√w
->
fú°
 = 
ﬁd
->first;

375 i‡(
√w
->
fú°
)

376 
√w
->
fú°
->
µªv
 = &new->first;

377 
ﬁd
->
fú°
 = 
NULL
;

378 
	}
}

380 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) \

381 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

383 
	#hli°_f‹_óch
(
pos
, 
hód
) \

384 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

386 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

387 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

388 
pos
 = 
n
)

	)

397 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

398 
pos
 = (
hód
)->
fú°
; \

399 
pos
 && \

400 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

401 
pos
 =Öos->
√xt
)

	)

409 
	#hli°_f‹_óch_íåy_c⁄töue
(
ços
, 
pos
, 
membî
) \

410 
pos
 = (pos)->
√xt
; \

411 
pos
 && \

412 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

413 
pos
 =Öos->
√xt
)

	)

421 
	#hli°_f‹_óch_íåy_‰om
(
ços
, 
pos
, 
membî
) \

422 ; 
pos
 && \

423 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

424 
pos
 =Öos->
√xt
)

	)

434 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
membî
) \

435 
pos
 = (
hód
)->
fú°
; \

436 
pos
 && ({ 
n
 =Öos->
√xt
; 1; }) && \

437 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

438 
pos
 = 
n
)

	)

	@/home/tgni/workspace/alg/src/graph/queue.c

1 
	~"queue.h
"

2 
	~"Áèl.h
"

3 
	~<°dlib.h
>

5 
	#MöQueueSize
 ( 5 )

	)

7 
MakeEm±y
–
Queue
 
Q
 );

9 
	$IsEm±y
–
Queue
 
Q
 )

11  
Q
->
Size
 == 0;

12 
	}
}

14 
	$IsFuŒ
–
Queue
 
Q
 )

16  
Q
->
Size
 =Q->
C≠acôy
;

17 
	}
}

19 
	$MakeEm±y
–
Queue
 
Q
 )

21 
Q
->
Size
 = 0;

22 
Q
->
Fr⁄t
 = 1;

23 
Q
->
Rór
 = 0;

24 
	}
}

26 
	$Succ
–
VÆue
, 
Queue
 
Q
 )

28 if–++
VÆue
 =
Q
->
C≠acôy
 )

29 
VÆue
 = 0;

30  
VÆue
;

31 
	}
}

33 
	$Enqueue
–
EÀmítTy≥
 
X
, 
Queue
 
Q
 )

35 if–
	`IsFuŒ
–
Q
 ) )

36 
	`Eº‹
( "Full queue" );

38 
Q
->
Size
++;

39 
Q
->
Rór
 = 
	`Succ
( Q->Rear, Q );

40 
Q
->
Aºay
[ Q->
Rór
 ] = 
X
;

42 
	}
}

54 
EÀmítTy≥
 
	$Dequeue
–
Queue
 
Q
 )

56 
EÀmítTy≥
 
X
 = 0;

58 if–
	`IsEm±y
–
Q
 ) ) {

59  (
EÀmítTy≥
)0;

61 
Q
->
Size
--;

62 
X
 = 
Q
->
Aºay
[ Q->
Fr⁄t
 ];

63 
Q
->
Fr⁄t
 = 
	`Succ
( Q->Front, Q );

65  
X
;

66 
	}
}

68 
Queue
 
	$Cª©eQueue
–
MaxEÀmíts
 )

70 
Queue
 
Q
;

72 if–
MaxEÀmíts
 < 
MöQueueSize
 )

73 
	`Eº‹
( "Queue size isÅoo small" );

75 
Q
 = 
	`mÆloc
––
QueueRec‹d
 ) );

76 if–
Q
 =
NULL
 )

77 
	`F©ÆEº‹
( "Out of space!!!" );

79 
Q
->
Aºay
 = 
	`mÆloc
––
EÀmítTy≥
 ) * 
MaxEÀmíts
 );

80 if–
Q
->
Aºay
 =
NULL
 )

81 
	`F©ÆEº‹
( "Out of space!!!" );

82 
Q
->
C≠acôy
 = 
MaxEÀmíts
;

83 
	`MakeEm±y
–
Q
 );

85 
Q
->
IsFuŒ
 = IsFull;

86 
Q
->
Enqueue
 = Enqueue;

87 
Q
->
Dequeue
 = Dequeue;

88 
Q
->
IsEm±y
 = IsEmpty;

90  
Q
;

91 
	}
}

93 
	$Di•o£Queue
–
Queue
 
Q
 )

95 if–
Q
 !
NULL
 ) {

96 
	`‰ì
–
Q
->
Aºay
 );

97 
	`‰ì
–
Q
 );

99 
	}
}

	@/home/tgni/workspace/alg/src/graph/queue.h

1 #i‚de‡
_Queue_h


2 
	#_Queue_h


	)

4 
	~"ty≥s.h
"

6 
QueueRec‹d
 *
	tQueue
;

8 
	sQueueRec‹d
 {

9 
	mC≠acôy
;

10 
	mFr⁄t
;

11 
	mRór
;

12 
	mSize
;

13 
EÀmítTy≥
 *
	mAºay
;

15 (*
	mIsFuŒ
)–
Queue
 
	mQ
 );

16 (*
	mEnqueue
)–
EÀmítTy≥
 
	mX
, 
Queue
 
	mQ
 );

17 
EÀmítTy≥
 (*
Dequeue
)–
Queue
 
	mQ
 );

18 (*
	mIsEm±y
)–
Queue
 
	mQ
 );

21 
Queue
 
Cª©eQueue
(
MaxEÀmíts
);

22 
Di•o£Queue
(
Queue
 
Q
);

	@/home/tgni/workspace/alg/src/graph/stack.c

1 
	~"°ack.h
"

2 
	~<°dlib.h
>

4 
MakeEm±y
–
Sèck
 
S
 );

6 
	$SèckIsEm±y
–
Sèck
 
S
 )

8  
S
->
Next
 =
NULL
;

9 
	}
}

11 
Sèck
 
	$Cª©eSèck
( )

13 
Sèck
 
S
;

15 i‡(!(
S
 = 
	`mÆloc
((
Node
))))

16  
NULL
;

18 
S
->
Next
 = 
NULL
;

19 
	`MakeEm±y
–
S
 );

21  
S
;

22 
	}
}

24 
	$MakeEm±y
–
Sèck
 
S
 )

26 i‡(
S
 =
NULL
)

29  !
	`SèckIsEm±y
–
S
 ) )

30 
	`P›
–
S
 );

33 
	}
}

35 
	$Di•o£Sèck
–
Sèck
 
S
 )

37 
	`MakeEm±y
–
S
 );

38 
	`‰ì
–
S
 );

39 
	}
}

41 
	$Push
–
EÀmítTy≥
 
X
, 
Sèck
 
S
 )

43 
PåToNode
 
TmpCñl
;

45 i‡(!(
TmpCñl
 = 
	`mÆloc
((
Node
))))

48 
TmpCñl
->
EÀmít
 = 
X
;

49 
TmpCñl
->
Next
 = 
S
->Next;

50 
S
->
Next
 = 
TmpCñl
;

53 
	}
}

55 
EÀmítTy≥
 
	$T›
–
Sèck
 
S
 )

57 i‡(!
	`SèckIsEm±y
–
S
 ) )

58  
S
->
Next
->
EÀmít
;

61 
	}
}

63 
EÀmítTy≥
 
	$P›
–
Sèck
 
S
 )

65 
PåToNode
 
Fú°Cñl
;

66 
EÀmítTy≥
 
e
;

68 i‡(
	`SèckIsEm±y
(
S
))

71 
Fú°Cñl
 = 
S
->
Next
;

72 
S
->
Next
 = S->Next->Next;

73 
e
 = 
Fú°Cñl
->
EÀmít
;

74 
	`‰ì
(
Fú°Cñl
);

76  
e
;

77 
	}
}

	@/home/tgni/workspace/alg/src/graph/stack.h

1 #i‚de‡
_Sèck_h_


2 
	#_Sèck_h_


	)

4 
	~"ty≥s.h
"

6 
Node
 *
	tPåToNode
;

7 
	sNode
 {

8 
EÀmítTy≥
 
	mEÀmít
;

9 
PåToNode
 
	mNext
;

12 
PåToNode
 
	tSèck
;

14 
SèckIsEm±y
–
Sèck
 
S
 );

15 
Sèck
 
Cª©eSèck
( );

16 
Di•o£Sèck
–
Sèck
 
S
 );

18 
Push
(
EÀmítTy≥
 
X
, 
Sèck
 
S
 );

19 
EÀmítTy≥
 
T›
–
Sèck
 
S
 );

20 
EÀmítTy≥
 
P›
–
Sèck
 
S
 );

	@/home/tgni/workspace/alg/src/graph/types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

39 
	tEÀmítTy≥
;

41 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

42 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

45 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

46 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

47 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

48 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

51 
	#__i§__


	)

52 
	#__ghn_wq__


	)

53 
	#__tmr__


	)

56 
	#DISPLAY_MSG
 0

	)

58 
	#DISABLE
 0

	)

59 
	#ENABLE
 1

	)

61 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

62 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

63 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

64 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

65 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

67 #i‚de‡
NULL


68 
	#NULL
 0

	)

71 #i‚de‡
TRUE


72 
	#TRUE
 (1 =1)

	)

75 #i‚de‡
FALSE


76 
	#FALSE
 (!
TRUE
)

	)

79 #i‚de‡
OK


80 
	#OK
 0

	)

83 #i‚de‡
ERROR


84 
	#ERROR
 -1

	)

87 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

89 
uöt8_t
 
byã0
, 
byã1
;

91 
byã0
 = (
two
 & 0xff);

92 
byã1
 = (
two
 & 0xff00) >> 8;

94 i‡(
ídün
) {

95 *
addr
 = 
byã1
;

96 *(
addr
+1Ë
byã0
;

98 *
addr
 = 
byã0
;

99 *(
addr
+1Ë
byã1
;

103 
	}
}

105 
	#•lô_ªad_two
(
addr
, 
ídün
) \

106 ((
ídün
) ? \

107 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

108 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

110 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

112 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

114 
byã0
 = (
four
 & 0xff);

115 
byã1
 = (
four
 & 0xff00) >> 8;

116 
byã2
 = (
four
 & 0xff0000) >> 16;

117 
byã3
 = (
four
 & 0xff000000) >> 24;

119 i‡(
ídün
) {

120 *
addr
 = 
byã3
;

121 *(
addr
+1Ë
byã2
;

122 *(
addr
+2Ë
byã1
;

123 *(
addr
+3Ë
byã0
;

125 *
addr
 = 
byã0
;

126 *(
addr
+1Ë
byã1
;

127 *(
addr
+2Ë
byã2
;

128 *(
addr
+3Ë
byã3
;

131 
	}
}

134 
	#•lô_ªad_four
(
addr
, 
ídün
) \

135 ((
ídün
) ? \

136 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

137 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

	@binheap.h

1 #i‚de‡
_BöHóp_H


2 
	#_BöHóp_H


	)

4 
	stbl_s
 {

5 
	mv
;

6 
	mdv
;

9 
tbl_s
 
	tHópEÀmTy≥
;

10 
HópSåu˘
 *
	tPri‹ôyQueue
;

12 
	sHópSåu˘
 {

13 
	mC≠acôy
;

14 
	mSize
;

15 
HópEÀmTy≥
 *
	mEÀmíts
;

17 (*
	mMakeEm±y
)–
Pri‹ôyQueue
 
	mH
 );

18 (*
	mIn£π
)–
HópEÀmTy≥
 
	mX
, 
Pri‹ôyQueue
 
	mH
 );

19 
HópEÀmTy≥
 (*
DñëeMö
)–
Pri‹ôyQueue
 
	mH
 );

20 
HópEÀmTy≥
 (*
FödMö
)–
Pri‹ôyQueue
 
	mH
 );

21 (*
	mIsEm±y
)–
Pri‹ôyQueue
 
	mH
 );

22 (*
	mIsFuŒ
)–
Pri‹ôyQueue
 
	mH
 );

23 } 
	tHópSåu˘
;

26 
Pri‹ôyQueue
 
Inôülize
–
MaxEÀmíts
 );

27 
De°roy
–
Pri‹ôyQueue
 
H
 );

	@fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

15 
	sli°_hód
 {

16 
li°_hód
 *
	m√xt
, *
	m¥ev
;

19 
li°_hód
 
	tli°_hód_t
;

21 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

23 
	#LIST_HEAD
(
«me
) \

24 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

26 
	#INIT_LIST_HEAD
(
±r
) do { \

27 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

28 } 0)

	)

38 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
_√w
,

39 
li°_hód
 * 
_¥ev
,

40 
li°_hód
 * 
_√xt
)

42 
_√xt
->
¥ev
 = 
_√w
;

43 
_√w
->
√xt
 = 
_√xt
;

44 
_√w
->
¥ev
 = 
_¥ev
;

45 
_¥ev
->
√xt
 = 
_√w
;

46 
	}
}

48 
	#__li°_add
(
_√w
, 
_¥ev
, 
_√xt
) do { \

49 
li°_hód
 *
__√w
 = 
_√w
; \

50 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

51 
li°_hód
 *
__√xt
 = 
_√xt
; \

53 (
__√xt
)->
¥ev
 = (
__√w
); \

54 (
__√w
)->
√xt
 = (
__√xt
); \

55 (
__√w
)->
¥ev
 = (
__¥ev
); \

56 (
__¥ev
)->
√xt
 = (
__√w
); \

57 } 0)

	)

70 
__ölöe__
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

72 
	`__li°_add
(
_√w
, 
_hód
, _hód->
√xt
);

73 
	}
}

75 
	#li°_add
(
_√w
, 
_hód
) do { \

76 
	`__li°_add
(
_√w
, 
_hód
, (_hód)->
√xt
); \

77 } 0)

	)

90 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

92 
	`__li°_add
(
_√w
, 
_hód
->
¥ev
, _head);

93 
	}
}

95 
	#li°_add_èû
(
_√w
, 
_hód
) do { \

96 
	`__li°_add
(
_√w
, (
_hód
)->
¥ev
, _head); \

97 } 0)

	)

109 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
_¥ev
,

110 
li°_hód
 * 
_√xt
)

112 
_√xt
->
¥ev
 = 
_¥ev
;

113 
_¥ev
->
√xt
 = 
_√xt
;

114 
	}
}

116 
	#__li°_dñ
(
_¥ev
, 
_√xt
) do { \

117 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

118 
li°_hód
 *
__√xt
 = 
_√xt
; \

120 (
__√xt
)->
¥ev
 = (
__¥ev
); \

121 (
__¥ev
)->
√xt
 = (
__√xt
); \

122 } 0)

	)

132 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
_íåy
)

134 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

135 
_íåy
->
√xt
 = _íåy->
¥ev
 = 0;

136 
	}
}

138 
	#li°_dñ
(
_íåy
) do { \

139 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

140 (
_íåy
)->
√xt
 = (_íåy)->
¥ev
 = 0; \

141 } 0)

	)

150 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
_íåy
)

152 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

153 
	`INIT_LIST_HEAD
(
_íåy
);

154 
	}
}

156 
	#li°_dñ_öô
(
_íåy
) do { \

157 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

158 
	`INIT_LIST_HEAD
(
_íåy
); \

159 } 0)

	)

168 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
_hód
)

170  
_hód
->
√xt
 == _head;

171 
	}
}

173 
	#li°_em±y
(
_hód
) \

174 –(
_hód
)->
√xt
 =(_hódË)

	)

178 
__ölöe__
 
	$li°_em±y_⁄e
(
li°_hód
 *
_hód
)

180  
_hód
->
√xt
 =_hód->
¥ev
;

181 
	}
}

189 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

191 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

193 i‡(
fú°
 !
li°
) {

194 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

195 
li°_hód
 *
©
 = 
hód
->
√xt
;

197 
fú°
->
¥ev
 = 
hód
;

198 
hód
->
√xt
 = 
fú°
;

200 
œ°
->
√xt
 = 
©
;

201 
©
->
¥ev
 = 
œ°
;

203 
	}
}

205 
	#off£tof
(
TYPE
, 
MEMBER
Ë((Ë&((TYPE *)0)->MEMBER)

	)

214 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

215 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

216 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

224 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

225 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

233 
	#li°_f‹_óch
(
pos
, 
hód
) \

234 
pos
 = (
hód
)->
√xt
;Öos != (head); \

235 
pos
 =Öos->
√xt
)

	)

237 
	#li°_f‹_óch_ªvî£
(
pos
, 
hód
) \

238 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

239 
pos
 =Öos->
¥ev
)

	)

248 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

249 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

250 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

252 
	#li°_f‹_óch_ß„_ªvî£
(
pos
, 
n
, 
hód
) \

253 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

254 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

262 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

263 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

264 &
pos
->
membî
 !(
hód
); \

265 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

273 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

274 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

275 &
pos
->
membî
 !(
hód
); \

276 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

285 
	shli°_hód
 {

286 
hli°_node
 *
	mfú°
;

289 
	shli°_node
 {

290 
hli°_node
 *
	m√xt
, **
	mµªv
;

293 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

294 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

295 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

296 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

298 
h
->
√xt
 = 
NULL
;

299 
h
->
µªv
 = 
NULL
;

300 
	}
}

302 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

304  !
h
->
µªv
;

305 
	}
}

307 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

309  !
h
->
fú°
;

310 
	}
}

312 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

314 
hli°_node
 *
√xt
 = 
n
->next;

315 
hli°_node
 **
µªv
 = 
n
->pprev;

316 *
µªv
 = 
√xt
;

317 i‡(
√xt
)

318 
√xt
->
µªv
 =Öprev;

319 
	}
}

321 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

323 
	`__hli°_dñ
(
n
);

324 
n
->
√xt
 = 0;

325 
n
->
µªv
 = 0;

326 
	}
}

328 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

330 i‡(!
	`hli°_unhashed
(
n
)) {

331 
	`__hli°_dñ
(
n
);

332 
	`INIT_HLIST_NODE
(
n
);

334 
	}
}

336 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

338 
hli°_node
 *
fú°
 = 
h
->first;

339 
n
->
√xt
 = 
fú°
;

340 i‡(
fú°
)

341 
fú°
->
µªv
 = &
n
->
√xt
;

342 
h
->
fú°
 = 
n
;

343 
n
->
µªv
 = &
h
->
fú°
;

344 
	}
}

347 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

348 
hli°_node
 *
√xt
)

350 
n
->
µªv
 = 
√xt
->pprev;

351 
n
->
√xt
 =Çext;

352 
√xt
->
µªv
 = &
n
->next;

353 *(
n
->
µªv
) =Ç;

354 
	}
}

356 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

357 
hli°_node
 *
√xt
)

359 
√xt
->√xà
n
->next;

360 
n
->
√xt
 =Çext;

361 
√xt
->
µªv
 = &
n
->next;

363 if(
√xt
->next)

364 
√xt
->√xt->
µªv
 = &next->next;

365 
	}
}

371 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

372 
hli°_hód
 *
√w
)

374 
√w
->
fú°
 = 
ﬁd
->first;

375 i‡(
√w
->
fú°
)

376 
√w
->
fú°
->
µªv
 = &new->first;

377 
ﬁd
->
fú°
 = 
NULL
;

378 
	}
}

380 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) \

381 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

383 
	#hli°_f‹_óch
(
pos
, 
hód
) \

384 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

386 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

387 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

388 
pos
 = 
n
)

	)

397 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

398 
pos
 = (
hód
)->
fú°
; \

399 
pos
 && \

400 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

401 
pos
 =Öos->
√xt
)

	)

409 
	#hli°_f‹_óch_íåy_c⁄töue
(
ços
, 
pos
, 
membî
) \

410 
pos
 = (pos)->
√xt
; \

411 
pos
 && \

412 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

413 
pos
 =Öos->
√xt
)

	)

421 
	#hli°_f‹_óch_íåy_‰om
(
ços
, 
pos
, 
membî
) \

422 ; 
pos
 && \

423 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

424 
pos
 =Öos->
√xt
)

	)

434 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
membî
) \

435 
pos
 = (
hód
)->
fú°
; \

436 
pos
 && ({ 
n
 =Öos->
√xt
; 1; }) && \

437 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

438 
pos
 = 
n
)

	)

	@queue.h

1 #i‚de‡
_Queue_h


2 
	#_Queue_h


	)

4 
	~"ty≥s.h
"

6 
QueueRec‹d
 *
	tQueue
;

8 
	sQueueRec‹d
 {

9 
	mC≠acôy
;

10 
	mFr⁄t
;

11 
	mRór
;

12 
	mSize
;

13 
EÀmítTy≥
 *
	mAºay
;

15 (*
	mIsFuŒ
)–
Queue
 
	mQ
 );

16 (*
	mEnqueue
)–
EÀmítTy≥
 
	mX
, 
Queue
 
	mQ
 );

17 
EÀmítTy≥
 (*
Dequeue
)–
Queue
 
	mQ
 );

18 (*
	mIsEm±y
)–
Queue
 
	mQ
 );

21 
Queue
 
Cª©eQueue
(
MaxEÀmíts
);

22 
Di•o£Queue
(
Queue
 
Q
);

	@stack.h

1 #i‚de‡
_Sèck_h_


2 
	#_Sèck_h_


	)

4 
	~"ty≥s.h
"

6 
Node
 *
	tPåToNode
;

7 
	sNode
 {

8 
EÀmítTy≥
 
	mEÀmít
;

9 
PåToNode
 
	mNext
;

12 
PåToNode
 
	tSèck
;

14 
SèckIsEm±y
–
Sèck
 
S
 );

15 
Sèck
 
Cª©eSèck
( );

16 
Di•o£Sèck
–
Sèck
 
S
 );

18 
Push
(
EÀmítTy≥
 
X
, 
Sèck
 
S
 );

19 
EÀmítTy≥
 
T›
–
Sèck
 
S
 );

20 
EÀmítTy≥
 
P›
–
Sèck
 
S
 );

	@types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

39 
	tEÀmítTy≥
;

41 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

42 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

45 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

46 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

47 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

48 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

51 
	#__i§__


	)

52 
	#__ghn_wq__


	)

53 
	#__tmr__


	)

56 
	#DISPLAY_MSG
 0

	)

58 
	#DISABLE
 0

	)

59 
	#ENABLE
 1

	)

61 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

62 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

63 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

64 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

65 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

67 #i‚de‡
NULL


68 
	#NULL
 0

	)

71 #i‚de‡
TRUE


72 
	#TRUE
 (1 =1)

	)

75 #i‚de‡
FALSE


76 
	#FALSE
 (!
TRUE
)

	)

79 #i‚de‡
OK


80 
	#OK
 0

	)

83 #i‚de‡
ERROR


84 
	#ERROR
 -1

	)

87 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

89 
uöt8_t
 
byã0
, 
byã1
;

91 
byã0
 = (
two
 & 0xff);

92 
byã1
 = (
two
 & 0xff00) >> 8;

94 i‡(
ídün
) {

95 *
addr
 = 
byã1
;

96 *(
addr
+1Ë
byã0
;

98 *
addr
 = 
byã0
;

99 *(
addr
+1Ë
byã1
;

103 
	}
}

105 
	#•lô_ªad_two
(
addr
, 
ídün
) \

106 ((
ídün
) ? \

107 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

108 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

110 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

112 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

114 
byã0
 = (
four
 & 0xff);

115 
byã1
 = (
four
 & 0xff00) >> 8;

116 
byã2
 = (
four
 & 0xff0000) >> 16;

117 
byã3
 = (
four
 & 0xff000000) >> 24;

119 i‡(
ídün
) {

120 *
addr
 = 
byã3
;

121 *(
addr
+1Ë
byã2
;

122 *(
addr
+2Ë
byã1
;

123 *(
addr
+3Ë
byã0
;

125 *
addr
 = 
byã0
;

126 *(
addr
+1Ë
byã1
;

127 *(
addr
+2Ë
byã2
;

128 *(
addr
+3Ë
byã3
;

131 
	}
}

134 
	#•lô_ªad_four
(
addr
, 
ídün
) \

135 ((
ídün
) ? \

136 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

137 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

	@
1
.
0
18
580
/home/tgni/workspace/alg/src/graph/adj2matrix.c
/home/tgni/workspace/alg/src/graph/articulation.c
/home/tgni/workspace/alg/src/graph/binheap.c
/home/tgni/workspace/alg/src/graph/binheap.h
/home/tgni/workspace/alg/src/graph/fatal.h
/home/tgni/workspace/alg/src/graph/graph.c
/home/tgni/workspace/alg/src/graph/list.h
/home/tgni/workspace/alg/src/graph/queue.c
/home/tgni/workspace/alg/src/graph/queue.h
/home/tgni/workspace/alg/src/graph/stack.c
/home/tgni/workspace/alg/src/graph/stack.h
/home/tgni/workspace/alg/src/graph/types.h
binheap.h
fatal.h
list.h
queue.h
stack.h
types.h
